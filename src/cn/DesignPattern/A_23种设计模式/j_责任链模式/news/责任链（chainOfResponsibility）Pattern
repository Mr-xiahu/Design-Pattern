需求:
    现在有一段话:"大家好:),<script>: 欢迎来到Design Pattern 大家都是996"
    ":)"----------->"^_^"
    "996"---------->"995"
    "<script>"----->[script]

现在该怎么实现呢？
    1.为了方便,我们将"大家好:),<script>: 欢迎来到Design Pattern 大家都是996"封装在class Msg内
    2.首先定义一个接口,因为是要将上面字符串的内容过滤并替换,
      所以定义为:Filter,其中存在方法:void doFilter(Msg msg);
    3.定义三个类,分别为:FaceFilter,HtmlFilter,KeyWordFilter.
      三者都实现Filter接口,并重写:doFilter(Msg msg);
    4.分别在三个类的doFilter(Msg msg)方法中实现各自的逻辑.
    5.调用:因为是责任链模式,所以看起来是一个链条结构,但是这里没有实现,我们暂时将其添加到list集合里面:
        List<Filter> filters = new ArrayList<>();
         filters.add(new HtmlFilter());
         filters.add(new KeywordFilter());
         for (Filter filter : filters) {
             filter.doFilter(msg);
         }
    6.这样实现,最后输出Msg即可.

现在需求改变了,比如说:
    ":)"----------->"^_^"成功,继续执行,
    "996"---------->"995"失败,便不再继续执行了
此时该怎么办呢？
    1.修改之前的方法:
        void doFilter(Msg msg);------>boolean doFilter(Msg msg);
    2.实现Filter的三个接口也得重写改方法
    3.增加一个类:FilterChain(过滤器链),有啥用?添加Filter,删除Filter,执行每个Filter的doFilter()
            private List<Filter> filters = new ArrayList<>();

            public FilterChain add(Filter filter) {
                filters.add(filter);
                return this;
            }
            //其实内部也是一个list集合
            public boolean doFilter(Msg msg) {
                for (Filter filter : filters) {
                    if (!filter.doFilter(msg)) {
                        return false;
                    }

                }
                return true;

            }
    4.实现:
            //1.实例化第一条过滤器链
            FilterChain filterChain = new FilterChain();
            //2.添加一个过滤script的过滤器
            filterChain.add(new HtmlFilter());
            //3.实例化第二条过滤器链
            FilterChain fc2 = new FilterChain();
            //4.添加一个过滤笑脸,一个过滤996的Filter
            fc2.add(new KeywordFilter()).add(new FaceFilter());
            //5.将两条链子连接在一起
            filterChain.add(fc2);
            //6.执行所有Filter的doFilter()方法,其中只要有一个Filter
                返回的是false,后面的Filter便不再执行
            filterChain.doFilter(msg);

