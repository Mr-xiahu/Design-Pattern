享元模式:共享元数据

是池技术的重要实现方式， 其定义如下： Use sharing to support large numbers of fine-grained objects efficiently.
使用共享对象可有效地支持大量的细粒度的对象

享元模式的定义为我们提出了两个要求： 细粒度的对象和共享对象。
我们知道分配太多的对象到应用程序中将有损程序的性能， 同时还容易造成内存溢出， 那怎么避免呢？
    就是享元模式提到的共享技术。 我们先来了解一下对象的内部状态和外部状态。

	内部状态（intrinsic） 与外部状态（extrinsic） 。
			内部状态
				内部状态是对象可共享出来的信息， 存储在享元对象内部并且不会随环境改变而改变，
				如我们例子中的id、 postAddress等， 它们可以作为一个对象的动态附加信息， 不必直接储存在具体某个对象中， 属于可以共享的部分。
			外部状态
				外部状态是对象得以依赖的一个标记， 是随环境改变而改变的、 不可以共享的状态，
				如我们例子中的考试科目+考试地点复合字符串， 它是一批对象的统一标识， 是唯一的一个索引值。


		享元模式的优点和缺点:
			享元模式是一个非常简单的模式， 它可以大大减少应用程序创建的对象， 降低程序内存
			的占用， 增强程序的性能， 但它同时也提高了系统复杂性， 需要分离出外部状态和内部状
			态， 而且外部状态具有固化特性， 不应该随内部状态改变而改变， 否则导致系统的逻辑混乱。



		享元模式的使用场景
			1.系统中存在大量的相似对象。
			2.细粒度的对象都具备较接近的外部状态， 而且内部状态与环境无关， 也就是说对象没有特定身份。
			3.需要缓冲池的场景。


		我们在使用享元模式时， 对象池中的享元对象尽量多， 多到足够满足业务为止

		外部状态最好以Java的基本类型作为标志， 如String、 int等， 可以大幅地提升效率。不要使用引用类型



在java中,如果你需要一个A,那么你可以将A封装到对象中,然后new 出这个对象
但是这种情况下,会导致有许多小Class
但是如果你A,B,C这些放入List集合,需要的时候再去取,便不会出现这种情况


参考:连接池,线程池